<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel de Control SSH</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/xterm@5.3.0/lib/xterm.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/xterm-addon-fit@0.8.0/lib/xterm-addon-fit.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm@5.3.0/css/xterm.min.css" />
    <style>
        .bg-dark-primary { background-color: #1a1a2e; }
        .bg-dark-secondary { background-color: #1f2335; }
        .bg-dark-tertiary { background-color: #25283b; }
        .bg-dark-accent { background-color: #2d3047; }
        
        .border-dark { border-color: #33354a; }
        .border-dark-accent { border-color: #4a4e69; }
        .border-dark-highlight { border-color: #5a5f87; }
        
        .text-light { color: #00ffb9; }
        .text-muted { color: #00ffb9; }
        
        #terminal {
            padding: 10px;
        }
    </style>
</head>
<body class="bg-dark-primary text-light h-full overflow-hidden">
    <div class="container flex h-full gap-px bg-dark-accent">
        <div class="sidebar w-1/5 bg-dark-secondary flex flex-col overflow-hidden border-r border-dark">
          <div class="section-header px-5 py-4 bg-dark-tertiary border-b border-dark font-semibold text-muted">
              Máquinas Virtuales
          </div>
            <div class="vm-list flex-1 overflow-y-auto p-3" id="vm-list-left"></div>
        </div>
        
        <div class="main-content w-3/5 bg-dark-primary flex flex-col overflow-hidden">
            <div class="section-header px-5 py-4 bg-dark-tertiary border-b border-dark font-semibold text-muted">
                Consola SSH
            </div>
            <div class="console-container flex-1 flex flex-col p-5 gap-4" id="console-container">
                <div class="no-selection flex justify-center items-center h-full text-muted italic" id="no-vm-selected">
                    Selecciona una máquina virtual para comenzar
                </div>
            </div>
        </div>
        
        <div class="sidebar w-1/5 bg-dark-secondary flex flex-col overflow-hidden">
            <div class="section-header px-5 py-4 bg-dark-tertiary border-b border-dark font-semibold text-muted">
                Recursos del Sistema
            </div>
            <div class="resources-container p-5 flex flex-col gap-3" id="resources-container">
                <div class="no-selection flex justify-center items-center text-muted italic">
                    Selecciona una máquina virtual para ver sus recursos
                </div>
            </div>
        </div>
    </div>

    <script>
        // Datos de las máquinas virtuales
        const virtualMachines = [
          { 
            id: 1, 
            name: "Servidor Ubuntu", 
            status: "En línea", 
            host: "amercado.ddns.net",
            cpu: 45, 
            memory: 65, 
            storage: 30 
          },
          { 
            id: 2, 
            name: "Servidor Windows", 
            status: "En línea", 
            host: "tunamayo.ddns.net",
            cpu: 25, 
            memory: 40, 
            storage: 60 
          }
        ];

        // Elementos DOM
        const vmListLeft = document.getElementById('vm-list-left');
        const consoleContainer = document.getElementById('console-container');
        const resourcesContainer = document.getElementById('resources-container');
        const noVmSelected = document.getElementById('no-vm-selected');
        
        // Variables globales
        let selectedVM = null;
        let terminal = null;
        let fitAddon = null;
        let socket = null;
        let isTerminalReady = false;
        
        // ========== FUNCIONES AUXILIARES ==========
        
        function updateConnectionStatus(status, color) {
            const statusElement = document.getElementById('connection-status');
            if (statusElement) {
                statusElement.textContent = status;
                statusElement.className = `text-${color}-400`;
            }
        }
        
        function safeTerminalWrite(message) {
            if (terminal && isTerminalReady) {
                terminal.write(message);
                return true;
            } else {
                console.warn('Terminal no disponible:', message);
                return false;
            }
        }
        
        // ========== INICIALIZACIÓN DE TERMINAL ==========
        
        function initializeTerminal() {
            return new Promise((resolve, reject) => {
                try {
                    // Limpiar terminal existente
                    if (terminal) {
                        terminal.dispose();
                        terminal = null;
                        isTerminalReady = false;
                    }
                    
                    // Verificar que el elemento exista
                    const terminalElement = document.getElementById('terminal');
                    if (!terminalElement) {
                        reject(new Error('Elemento terminal no encontrado en el DOM'));
                        return;
                    }
                    
                    // Crear nueva terminal
                    terminal = new Terminal({
                        cursorBlink: true,
                        theme: {
                            background: '#000000',
                            foreground: '#00ff00',
                            cursor: '#00ff00'
                        },
                        fontSize: 14,
                        fontFamily: 'Courier New, monospace'
                    });
                    
                    // Configurar addons
                    fitAddon = new FitAddon.FitAddon();
                    terminal.loadAddon(fitAddon);
                    
                    // Abrir terminal
                    terminal.open(terminalElement);
                    
                    // Ajustar tamaño
                    setTimeout(() => {
                        try {
                            fitAddon.fit();
                            isTerminalReady = true;
                            console.log('✅ Terminal inicializada correctamente');
                            resolve(terminal);
                        } catch (fitError) {
                            console.warn('Error ajustando terminal:', fitError);
                            isTerminalReady = true;
                            resolve(terminal); // Resolvemos igual aunque haya error de ajuste
                        }
                    }, 100);
                    
                    // Redimensionar con la ventana
                    window.addEventListener('resize', () => {
                        if (fitAddon && isTerminalReady) {
                            try {
                                fitAddon.fit();
                            } catch (e) {
                                console.warn('Error redimensionando terminal:', e);
                            }
                        }
                    });
                    
                } catch (error) {
                    console.error('❌ Error inicializando terminal:', error);
                    isTerminalReady = false;
                    reject(error);
                }
            });
        }
        
        // ========== GESTIÓN DE MÁQUINAS VIRTUALES ==========
        
        function renderVMList() {
            if (!vmListLeft) return;
            
            vmListLeft.innerHTML = '';
            
            virtualMachines.forEach(vm => {
                const vmItem = document.createElement('div');
                vmItem.className = 'vm-item bg-dark-tertiary border-2 border-dark-accent rounded-lg p-4 mb-3 cursor-pointer transition-all duration-300 shadow-sm hover:bg-dark-accent hover:border-gray-500 hover:shadow-md';
                vmItem.dataset.id = vm.id;
                
                vmItem.innerHTML = `
                    <div class="vm-name font-semibold text-white mb-1">${vm.name}</div>
                    <div class="vm-status text-sm text-gray-400">${vm.status} • ${vm.host}</div>
                `;
                
                vmItem.addEventListener('click', () => selectVM(vm));
                vmListLeft.appendChild(vmItem);
            });
        }
        
        function selectVM(vm) {
            disconnectSSH();
            
            // Actualizar selección visual
            document.querySelectorAll('.vm-item').forEach(item => {
                item.classList.remove('bg-dark-highlight', 'border-blue-400', 'shadow-lg');
                item.classList.add('bg-dark-tertiary', 'border-dark-accent');
            });
            
            const selectedItem = document.querySelector(`.vm-item[data-id="${vm.id}"]`);
            if (selectedItem) {
                selectedItem.classList.remove('bg-dark-tertiary', 'border-dark-accent');
                selectedItem.classList.add('bg-dark-highlight', 'border-blue-400', 'shadow-lg');
            }
            
            selectedVM = vm;
            updateConsole(vm);
            updateResources(vm);
        }
        
        // ========== CONEXIÓN SSH ==========
        
        async function connectSSH(vm) {
            if (!vm) {
                console.error('No hay máquina virtual seleccionada');
                return;
            }
            
            // Asegurar que la terminal esté lista
            if (!isTerminalReady) {
                try {
                    await initializeTerminal();
                } catch (error) {
                    console.error('No se pudo inicializar la terminal:', error);
                    return;
                }
            }
            
            // Mostrar mensaje de conexión
            safeTerminalWrite(`\r\n\x1b[1;33m🔄 Conectando a ${vm.name}...\x1b[0m\r\n`);
            safeTerminalWrite(`\x1b[1;33m🌐 DNS: ${vm.host}\x1b[0m\r\n`);
            
            // Verificar backend
            try {
                const response = await fetch('http://localhost:3001/health');
                if (!response.ok) throw new Error('Backend no responde');
                safeTerminalWrite('\x1b[1;32m✅ Backend disponible\x1b[0m\r\n');
            } catch (error) {
                safeTerminalWrite(`\x1b[1;31m❌ Error: ${error.message}\x1b[0m\r\n`);
                safeTerminalWrite('\x1b[1;33m💡 Asegúrate de que el servidor backend esté ejecutándose\x1b[0m\r\n');
                return;
            }
            
            // Configurar WebSocket
            const backendUrl = 'ws://localhost:3001/ssh';
            socket = new WebSocket(backendUrl);
            
            socket.onopen = () => {
                safeTerminalWrite('\x1b[1;32m✅ Conexión WebSocket establecida\x1b[0m\r\n');
                safeTerminalWrite('\x1b[1;33m🔐 Autenticando...\x1b[0m\r\n');
                updateConnectionStatus('Conectando...', 'yellow');
                
                socket.send(JSON.stringify({
                    type: 'connect',
                    vmId: vm.id
                }));
            };
            
            socket.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    
                    if (data.type === 'output') {
                        safeTerminalWrite(data.data);
                    } else if (data.type === 'status') {
                        safeTerminalWrite(`\r\n\x1b[1;36m${data.message}\x1b[0m\r\n`);
                        updateConnectionStatus('Conectado', 'green');
                    } else if (data.type === 'error') {
                        safeTerminalWrite(`\r\n\x1b[1;31m❌ ${data.message}\x1b[0m\r\n`);
                        updateConnectionStatus('Error', 'red');
                    }
                } catch (error) {
                    console.error('Error parsing message:', error);
                }
            };
            
            socket.onclose = (event) => {
                const message = event.code === 1000 ? 
                    '\r\n\x1b[1;33m🔌 Conexión cerrada\x1b[0m\r\n' : 
                    `\r\n\x1b[1;31m❌ Conexión cerrada (código ${event.code})\x1b[0m\r\n`;
                
                safeTerminalWrite(message);
                updateConnectionStatus('Desconectado', 'red');
            };
            
            socket.onerror = (error) => {
                safeTerminalWrite('\r\n\x1b[1;31m❌ Error de conexión WebSocket\x1b[0m\r\n');
                updateConnectionStatus('Error de conexión', 'red');
            };
            
            // Configurar entrada de teclado
            if (terminal && isTerminalReady) {
                terminal.onData((data) => {
                    if (socket && socket.readyState === WebSocket.OPEN) {
                        socket.send(JSON.stringify({
                            type: 'input',
                            data: data
                        }));
                    }
                });
            }
        }
        
        function disconnectSSH() {
            if (socket) {
                socket.close();
                socket = null;
            }
            safeTerminalWrite('\r\n\x1b[1;33m🔌 Desconectado por el usuario\x1b[0m\r\n');
            updateConnectionStatus('Desconectado', 'red');
        }
        
        // ========== INTERFAZ DE USUARIO ==========
        
        function updateConsole(vm) {
            if (!consoleContainer || !noVmSelected) return;
            
            noVmSelected.style.display = 'none';
            
            consoleContainer.innerHTML = `
                <div class="console-header flex justify-between items-center mb-4">
                    <div class="console-title text-xl font-semibold text-gray-400">
                        Conexión SSH: ${vm.name} (${vm.host})
                    </div>
                    <div class="console-actions">
                        <button class="connect-btn bg-green-600 border-none text-white px-4 py-2 rounded cursor-pointer ml-3 hover:bg-green-700 transition-colors">
                            Conectar
                        </button>
                        <button class="disconnect-btn bg-red-600 border-none text-white px-4 py-2 rounded cursor-pointer ml-3 hover:bg-red-700 transition-colors">
                            Desconectar
                        </button>
                    </div>
                </div>
                <div class="terminal-container flex-1 bg-black rounded-lg border border-gray-600 overflow-hidden" style="min-height: 0;">
                    <div id="terminal" class="h-full w-full"></div>
                </div>
                <div class="console-status text-sm text-gray-400 mt-2">
                    Estado: <span id="connection-status" class="text-red-400">Desconectado</span>
                </div>
            `;
            
            // Inicializar terminal después de que el DOM se actualice
            setTimeout(async () => {
                try {
                    await initializeTerminal();
                    console.log('Terminal lista para usar');
                } catch (error) {
                    console.error('Error inicializando terminal en updateConsole:', error);
                }
            }, 50);
            
            // Configurar botones
            setTimeout(() => {
                const connectBtn = document.querySelector('.connect-btn');
                const disconnectBtn = document.querySelector('.disconnect-btn');
                
                if (connectBtn) {
                    connectBtn.onclick = () => connectSSH(vm);
                }
                if (disconnectBtn) {
                    disconnectBtn.onclick = disconnectSSH;
                }
            }, 100);
        }
        
        function updateResources(vm) {
            if (!resourcesContainer) return;
            
            if (vm.status === 'Desconectado') {
                resourcesContainer.innerHTML = `
                    <div class="no-selection flex justify-center items-center text-gray-400 italic">
                        La máquina virtual está desconectada
                    </div>
                `;
                return;
            }
            
            resourcesContainer.innerHTML = `
                <div class="resource-item bg-dark-tertiary rounded-lg p-4 border-2 border-dark-accent mb-3 shadow-sm">
                    <div class="resource-header flex justify-between mb-3">
                        <div class="resource-title font-semibold text-gray-400">CPU</div>
                        <div class="resource-value text-gray-400">${vm.cpu}%</div>
                    </div>
                    <div class="progress-bar h-2 bg-dark-primary rounded overflow-hidden">
                        <div class="progress-fill cpu-progress h-full bg-blue-500 rounded" style="width: ${vm.cpu}%"></div>
                    </div>
                </div>
                <div class="resource-item bg-dark-tertiary rounded-lg p-4 border-2 border-dark-accent mb-3 shadow-sm">
                    <div class="resource-header flex justify-between mb-3">
                        <div class="resource-title font-semibold text-gray-400">Memoria</div>
                        <div class="resource-value text-gray-400">${vm.memory}%</div>
                    </div>
                    <div class="progress-bar h-2 bg-dark-primary rounded overflow-hidden">
                        <div class="progress-fill memory-progress h-full bg-pink-500 rounded" style="width: ${vm.memory}%"></div>
                    </div>
                </div>
                <div class="resource-item bg-dark-tertiary rounded-lg p-4 border-2 border-dark-accent mb-3 shadow-sm">
                    <div class="resource-header flex justify-between mb-3">
                        <div class="resource-title font-semibold text-gray-400">Almacenamiento</div>
                        <div class="resource-value text-gray-400">${vm.storage}%</div>
                    </div>
                    <div class="progress-bar h-2 bg-dark-primary rounded overflow-hidden">
                        <div class="progress-fill storage-progress h-full bg-indigo-500 rounded" style="width: ${vm.storage}%"></div>
                    </div>
                </div>
                <div class="resource-item bg-dark-tertiary rounded-lg p-4 border-2 border-dark-accent mb-3 shadow-sm">
                    <div class="resource-header flex justify-between">
                        <div class="resource-title font-semibold text-gray-400">DNS</div>
                        <div class="resource-value text-gray-400">${vm.host}</div>
                    </div>
                </div>
                <div class="resource-item bg-dark-tertiary rounded-lg p-4 border-2 border-dark-accent mb-3 shadow-sm">
                    <div class="resource-header flex justify-between">
                        <div class="resource-title font-semibold text-gray-400">Estado</div>
                        <div class="resource-value text-gray-400">${vm.status}</div>
                    </div>
                </div>
            `;
        }
        
        // ========== INICIALIZACIÓN ==========
        
        document.addEventListener('DOMContentLoaded', () => {
            console.log('🚀 Inicializando aplicación SSH...');
            renderVMList();
        });
    </script>
</body>
</html>