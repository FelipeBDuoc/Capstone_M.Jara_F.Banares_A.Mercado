---
---

<div class="w-full text-gray-200" client:load>
  
  <div class="flex justify-between items-center mb-4 gap-4">
    
    <button
      id="save-changes-btn"
      class="px-4 py-2 font-semibold text-white bg-green-200 rounded-md transition-all
             disabled:bg-gray-500 disabled:cursor-not-allowed"
      disabled
    >
      Guardar Cambios
    </button>
    
    <input 
      type="search"
      id="user-search-input"
      placeholder="Buscar por nombre de usuario..."
      class="w-full max-w-xs px-4 py-2 bg-dark-accent border border-dark-highlight rounded-md text-gray-200 placeholder-gray-400"
    />
  </div>

  <div class="rounded-lg border border-dark-accent overflow-hidden">
    <table class="w-full min-w-full divide-y divide-dark-accent">
      <thead class="bg-dark-secondary">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-light uppercase tracking-wider">Usuario</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-light uppercase tracking-wider">Email</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-light uppercase tracking-wider">Discord ID</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-light uppercase tracking-wider">Rol</th>
        </tr>
      </thead>
      <tbody id="user-table-body" class="bg-dark-tertiary divide-y divide-dark-accent">
        </tbody>
    </table>
  </div>
  
  <p id="user-list-status" class="text-gray-400 mt-4"></p>

  <div class="flex justify-between items-center mt-4">
    <button
      id="prev-page-btn"
      class="px-4 py-2 font-medium bg-dark-accent border border-dark-highlight rounded-md transition-all hover:bg-dark-highlight
             disabled:opacity-50 disabled:cursor-not-allowed"
    >
      Anterior
    </button>
    
    <span id="page-info" class="text-sm text-gray-400">
      Página 1 de 1
    </span>
    
    <button
      id="next-page-btn"
      class="px-4 py-2 font-medium bg-dark-accent border border-dark-highlight rounded-md transition-all hover:bg-dark-highlight
             disabled:opacity-50 disabled:cursor-not-allowed"
    >
      Siguiente
    </button>
  </div>
</div>


<script>
  // --- CONFIGURACIÓN Y ESTADO GLOBAL ---
  const ROLES = ['user', 'mod', 'admin'];
  const USERS_PER_PAGE = 10;

  let allUsers = [];        // Todos los usuarios de la DB
  let filteredUsers = [];   // Usuarios después de aplicar el buscador
  let pendingChanges = {};  // Cambios pendientes (ej: { "123": "admin" })
  let currentPage = 1;

  // Objeto para guardar las referencias a los elementos del DOM
  const ui = {};

  // --- 1. FUNCIONES DE RENDERIZADO Y LÓGICA ---

  /**
   * Crea el HTML para un <select> de roles
   */
  function createRoleSelector(userId, currentRole) {
    const optionsHtml = ROLES.map(role => 
      `<option value="${role}" ${role === currentRole ? 'selected' : ''}>${role}</option>`
    ).join('');
    
    return `
      <select 
        data-user-id="${userId}" 
        class="role-selector bg-dark-accent border border-dark-highlight text-gray-200 rounded-md p-2"
      >
        ${optionsHtml}
      </select>
    `;
  }

  /**
   * Renderiza la tabla con los usuarios de la página actual
   */
  function renderTable() {
    if (!ui.tableBody) return;

    // Calcular qué usuarios mostrar
    const startIndex = (currentPage - 1) * USERS_PER_PAGE;
    const endIndex = startIndex + USERS_PER_PAGE;
    const usersToRender = filteredUsers.slice(startIndex, endIndex);

    // Limpiar tabla
    ui.tableBody.innerHTML = '';

    if (usersToRender.length === 0) {
      ui.tableBody.innerHTML = `
        <tr><td colspan="4" class="px-6 py-4 text-center text-gray-400">
          No se encontraron usuarios.
        </td></tr>
      `;
      return;
    }

    // Renderizar cada fila
    usersToRender.forEach(user => {
      // ¿Este usuario tiene un cambio pendiente?
      const displayRole = pendingChanges[user.id] || user.role;
      
      const row = document.createElement('tr');
      row.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap"><div class="font-medium">${user.username || 'N/A'}</div></td>
        <td class="px-6 py-4 whitespace-nowrap">${user.email || 'N/A'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-gray-400">${user.discordId || 'N/A'}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          ${createRoleSelector(user.id, displayRole)}
        </td>
      `;
      ui.tableBody.appendChild(row);
    });
  }

  /**
   * Actualiza los controles de paginación (botones y texto)
   */
  function renderPagination() {
    const totalPages = Math.ceil(filteredUsers.length / USERS_PER_PAGE) || 1;
    
    ui.pageInfo.textContent = `Página ${currentPage} de ${totalPages}`;
    ui.prevButton.disabled = (currentPage === 1);
    ui.nextButton.disabled = (currentPage === totalPages);
  }

  /**
   * Actualiza el estado (y estilo) del botón "Guardar Cambios"
   */
  function updateSaveButtonState() {
    const changesCount = Object.keys(pendingChanges).length;
    
    if (changesCount > 0) {
      ui.saveButton.disabled = false;
      ui.saveButton.textContent = `Guardar (${changesCount}) Cambios`;
    } else {
      ui.saveButton.disabled = true;
      ui.saveButton.textContent = 'Guardar Cambios';
    }
  }

  /**
   * Aplica el filtro de búsqueda y actualiza la vista
   */
  function applyFilters() {
    const searchTerm = ui.searchInput.value.toLowerCase();
    
    filteredUsers = allUsers.filter(user => 
      (user.username || '').toLowerCase().includes(searchTerm)
    );
    
    currentPage = 1; // Volver a la página 1
    renderTable();
    renderPagination();
  }


  // --- 2. FUNCIONES DE MANEJO DE DATOS (API) ---

  /**
   * Busca todos los usuarios de la API y los guarda en el estado
   */
  async function fetchUsers() {
    try {
      ui.statusMessage.textContent = 'Cargando usuarios...';
      const response = await fetch('/api/users');
      if (!response.ok) throw new Error('Error de red');
      
      allUsers = await response.json();
      filteredUsers = [...allUsers]; // Copiar la lista
      
      ui.statusMessage.textContent = '';
      renderTable();
      renderPagination();
      
    } catch (error) {
      console.error('Error al cargar usuarios:', error);
      ui.statusMessage.textContent = 'Error al cargar la lista de usuarios.';
    }
  }

  /**
   * Envía los cambios pendientes a la API (PATCH)
   */
  async function saveChanges() {
    const changesCount = Object.keys(pendingChanges).length;
    if (changesCount === 0) return;

    // Convertir el objeto { "1": "admin" } a un array [{ userId: "1", newRole: "admin" }]
    const changesToSave = Object.keys(pendingChanges).map(userId => ({
      userId: userId, // Lo enviamos como string, la API hace el parseInt
      newRole: pendingChanges[userId]
    }));

    ui.saveButton.disabled = true;
    ui.saveButton.textContent = 'Guardando...';

    try {
      const response = await fetch('/api/users', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(changesToSave)
      });

      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.error || 'Error en el servidor');
      }

      // Éxito: limpiar cambios pendientes y recargar todo
      pendingChanges = {};
      await fetchUsers(); // Recargamos la lista desde la DB
      updateSaveButtonState(); // Esto reseteará el botón
      alert('¡Cambios guardados con éxito!');

    } catch (error) {
      console.error('Error al guardar cambios:', error);
      alert(`Error al guardar: ${error.message}`);
      // No reseteamos los cambios pendientes, el usuario puede reintentar
      updateSaveButtonState(); // Re-habilitar el botón
    }
  }


  // --- 3. MANEJADORES DE EVENTOS (HANDLERS) ---

  function handleRoleChange(event) {
    const target = event.target;
    // Nos aseguramos que el evento venga de un <select>
    if (target.tagName !== 'SELECT' || !target.classList.contains('role-selector')) {
      return;
    }

    const userId = target.dataset.userId;
    const newRole = target.value;
    
    // Encontrar el rol original del usuario
    const originalUser = allUsers.find(u => u.id == userId);
    if (!originalUser) return;

    if (originalUser.role === newRole) {
      // Si el rol es el mismo que el original, lo quitamos de "pendientes"
      delete pendingChanges[userId];
    } else {
      // Si es diferente, lo añadimos
      pendingChanges[userId] = newRole;
    }
    
    updateSaveButtonState();
  }

  function handleSearchInput() {
    applyFilters();
  }

  function goToPrevPage() {
    if (currentPage > 1) {
      currentPage--;
      renderTable();
      renderPagination();
    }
  }

  function goToNextPage() {
    const totalPages = Math.ceil(filteredUsers.length / USERS_PER_PAGE);
    if (currentPage < totalPages) {
      currentPage++;
      renderTable();
      renderPagination();
    }
  }

  // --- 4. INICIALIZACIÓN ---

  /**
   * Asigna los elementos del DOM y los event listeners
   */
  function initialize() {
    // Asignar elementos a la variable 'ui'
    ui.tableBody = document.getElementById('user-table-body');
    ui.statusMessage = document.getElementById('user-list-status');
    ui.saveButton = document.getElementById('save-changes-btn');
    ui.searchInput = document.getElementById('user-search-input');
    ui.prevButton = document.getElementById('prev-page-btn');
    ui.nextButton = document.getElementById('next-page-btn');
    ui.pageInfo = document.getElementById('page-info');

    // Asignar Listeners
    ui.searchInput.addEventListener('input', handleSearchInput);
    ui.saveButton.addEventListener('click', saveChanges);
    ui.prevButton.addEventListener('click', goToPrevPage);
    ui.nextButton.addEventListener('click', goToNextPage);
    
    // Listener de cambio en la tabla (Delegación de eventos)
    ui.tableBody.addEventListener('change', handleRoleChange);
    
    // Cargar los datos iniciales
    fetchUsers();
  }

  // Iniciar todo el componente
  initialize();

</script>