---
---

<div class="w-full text-gray-200" client:load>

  <h2 class="text-2xl font-semibold text-light mb-4">Gestión del Carrusel</h2>
  
  <div class="rounded-lg border border-dark-accent overflow-hidden">
    <table class="w-full min-w-full divide-y divide-dark-accent">
      
      <thead class="bg-dark-secondary">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-light uppercase tracking-wider">Imagen</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-light uppercase tracking-wider">Título</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-light uppercase tracking-wider">Descripción</th>
          <th class="px-6 py-3 text-right text-xs font-medium text-light uppercase tracking-wider">Acciones</th>
        </tr>
      </thead>
      
      <tbody id="carousel-table-body" class="bg-dark-tertiary divide-y divide-dark-accent">
        <tr>
          <td colspan="4" class="px-6 py-4 whitespace-nowrap text-center text-gray-400">
            Cargando elementos...
          </td>
        </tr>
      </tbody>
      
    </table>
  </div>
  <p id="carousel-list-status" class="text-gray-400 mt-4"></p>


  <h3 class="text-xl font-semibold text-light mb-4 mt-8">Subir Nuevo Elemento</h3>
  
  <form id="carousel-form-create" enctype="multipart/form-data" 
        class="bg-dark-secondary p-6 rounded-lg border border-dark-accent space-y-4">
    
    <div>
      <label for="create-title" class="block text-sm font-medium text-light mb-1">
        Título:
      </label>
      <input 
        type="text" 
        name="title" 
        id="create-title" 
        required 
        class="w-full bg-dark-accent border border-dark-highlight text-gray-200 rounded-md p-2 focus:ring-light focus:border-light" 
      />
    </div>
    
    <div>
      <label for="create-description" class="block text-sm font-medium text-light mb-1">
        Descripción:
      </label>
      <textarea 
        name="description" 
        id="create-description" 
        required 
        rows="3"
        class="w-full bg-dark-accent border border-dark-highlight text-gray-200 rounded-md p-2 focus:ring-light focus:border-light"
      ></textarea>
    </div>
    
    <div>
      <label for="create-image" class="block text-sm font-medium text-light mb-1">
        Imagen:
      </label>
      <input 
        type="file" 
        name="image" 
        id="create-image" 
        accept="image/*" 
        required
        class="block w-full text-sm text-gray-400
               file:mr-4 file:py-2 file:px-4
               file:rounded-md file:border-0 file:text-sm file:font-semibold
               file:bg-light file:text-dark-primary
               hover:file:bg-opacity-80 cursor-pointer"
      />
    </div>
    
    <div class="flex items-center gap-4">
      <button 
        type="submit"
        id="carousel-submit-btn"
        class="px-5 py-2 font-semibold text-dark-primary bg-light rounded-md transition-all hover:bg-opacity-80
               disabled:bg-gray-500 disabled:cursor-not-allowed"
      >
        Subir
      </button>
      <span id="carousel-upload-status" class="text-gray-400"></span>
    </div>
    
  </form>
</div>


<div 
  id="edit-modal" 
  class="fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center z-50 hidden"
>
  <div class="bg-dark-secondary p-8 rounded-lg border border-dark-accent w-full max-w-2xl space-y-4">
    <h3 class="text-xl font-semibold text-light">Editar Elemento del Carrusel</h3>
    
    <form id="carousel-form-edit" enctype="multipart/form-data">
      
      <input type="hidden" name="id" id="edit-id" />
      
      <div>
        <label for="edit-title" class="block text-sm font-medium text-light mb-1">Título:</label>
        <input type="text" name="title" id="edit-title" required 
               class="w-full bg-dark-accent border border-dark-highlight text-gray-200 rounded-md p-2" />
      </div>
      
      <div>
        <label for="edit-description" class="block text-sm font-medium text-light mb-1">Descripción:</label>
        <textarea name="description" id="edit-description" required rows="3"
                  class="w-full bg-dark-accent border border-dark-highlight text-gray-200 rounded-md p-2"></textarea>
      </div>
      
      <div>
        <label for="edit-image" class="block text-sm font-medium text-light mb-1">Reemplazar Imagen (Opcional):</label>
        <div class="flex items-center gap-4">
          <img id="edit-image-preview" src="" alt="Imagen Actual" class="w-20 h-12 object-cover rounded-md bg-dark-accent" />
          <input type="file" name="image" id="edit-image" accept="image/*"
                 class="block w-full text-sm text-gray-400
                        file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0
                        file:bg-light file:text-dark-primary hover:file:bg-opacity-80" />
        </div>
        <p class="text-xs text-gray-400 mt-1">Si no seleccionas un archivo nuevo, se conservará la imagen actual.</p>
      </div>
      
      <div class="flex justify-end items-center gap-4 pt-4">
        <button 
          type="button"
          id="edit-cancel-btn"
          class="px-5 py-2 font-semibold text-gray-200 bg-dark-accent rounded-md transition-all hover:bg-dark-highlight"
        >
          Cancelar
        </button>
        <button 
          type="submit"
          id="edit-submit-btn"
          class="px-5 py-2 font-semibold text-dark-primary bg-light rounded-md transition-all hover:bg-opacity-80
                 disabled:bg-gray-500"
        >
          Guardar Cambios
        </button>
      </div>
      <p id="edit-upload-status" class="text-gray-400 text-right"></p>
    </form>
  </div>
</div>


<script>
  // --- REFERENCIAS A ELEMENTOS DEL MODAL (globales al script) ---
  const editModal = document.getElementById('edit-modal');
  const editForm = document.getElementById('carousel-form-edit');
  const cancelBtn = document.getElementById('edit-cancel-btn');
  const editSubmitBtn = document.getElementById('edit-submit-btn');
  const editStatusText = document.getElementById('edit-upload-status');
  const idInput = document.getElementById('edit-id');
  const titleInput = document.getElementById('edit-title');
  const descInput = document.getElementById('edit-description');
  const imgPreview = document.getElementById('edit-image-preview');
  const fileInput = document.getElementById('edit-image');

  /**
   * Busca los elementos del carrusel en la API y los muestra en la tabla
   */
  async function fetchAndRenderItems() {
    const tableBody = document.getElementById('carousel-table-body');
    const statusMessage = document.getElementById('carousel-list-status');
    
    if (!tableBody || !statusMessage) return;

    try {
      statusMessage.textContent = 'Cargando elementos...';
      
      const response = await fetch('/api/carousel'); 
      if (!response.ok) throw new Error('No se pudo conectar al servidor.');

      const items = await response.json();
      
      tableBody.innerHTML = ''; // Limpiamos la tabla
      
      if (items.length === 0) {
        statusMessage.textContent = 'No hay elementos en el carrusel.';
        tableBody.innerHTML = `
          <tr>
            <td colspan="4" class="px-6 py-4 whitespace-nowrap text-center text-gray-400">
              No se encontraron elementos.
            </td>
          </tr>
        `;
        return;
      }

      statusMessage.textContent = ''; // Limpiamos el mensaje de estado

      items.forEach(item => {
        const row = document.createElement('tr');
        const shortDesc = item.description.length > 60 ? item.description.substring(0, 60) + '...' : item.description;

        // Convertimos el objeto 'item' a un string JSON para guardarlo en el botón
        // Usamos comillas simples en el HTML y dobles dentro del JSON
        const itemJson = JSON.stringify(item).replace(/"/g, "'");

        row.innerHTML = `
          <td class="px-6 py-4">
            <img src="${item.imageUrl}" alt="${item.title}" class="w-20 h-12 object-cover rounded-md bg-dark-accent" />
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="font-medium">${item.title}</div>
          </td>
          <td class="px-6 py-4 text-gray-400">
            ${shortDesc}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <button
              class="edit-btn text-light hover:text-opacity-80 font-medium"
              data-item="${itemJson}" 
            >
              Editar
            </button>
          </td>
        `;
        tableBody.appendChild(row);
      });

    } catch (error)
    {
      console.error('Error al cargar elementos del carrusel:', error);
      tableBody.innerHTML = '';
      statusMessage.textContent = 'Error al cargar los elementos.';
    }
  }

  /**
   * Configura el listener para el formulario de subida (CREACIÓN)
   */
  function setupUploadForm() {
    const form = document.getElementById('carousel-form-create');
    const submitBtn = document.getElementById('carousel-submit-btn');
    const statusText = document.getElementById('carousel-upload-status');

    if (!form || !submitBtn || !statusText) {
      console.warn("Elementos del formulario de creación no encontrados");
      return;
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      submitBtn.disabled = true;
      statusText.textContent = 'Subiendo imagen...';

      const formData = new FormData(form);

      try {
        const res = await fetch('/api/carousel', {
          method: 'POST',
          body: formData,
        });

        if (!res.ok) {
          const errorData = await res.json();
          throw new Error(errorData.error || 'Error desconocido del servidor');
        }

        statusText.textContent = '¡Elemento subido con éxito!';
        form.reset();
        
        // Volvemos a cargar la lista para que se vea el nuevo item
        fetchAndRenderItems();
        
        setTimeout(() => { statusText.textContent = ''; }, 3000);

      } catch (error) {
        console.error('Error inesperado:', error);
        statusText.textContent = `Error: ${error.message}`;
      } finally {
        submitBtn.disabled = false;
      }
    });
  }

  /**
   * Abre el modal y rellena los campos con los datos del item
   */
  function openEditModal(item) {
    idInput.value = item.id;
    titleInput.value = item.title;
    descInput.value = item.description;
    imgPreview.src = item.imageUrl;
    fileInput.value = null; // Limpiar el input de archivo
    editStatusText.textContent = '';
    editModal.classList.remove('hidden');
  }

  /**
   * Cierra el modal
   */
  function closeEditModal() {
    editModal.classList.add('hidden');
  }

  /**
   * Maneja el envío del formulario de EDICIÓN
   */
  async function handleEditSubmit(e) {
    e.preventDefault();
    editSubmitBtn.disabled = true;
    editStatusText.textContent = 'Guardando cambios...';

    const formData = new FormData(editForm);

    try {
      const res = await fetch('/api/carousel', {
        method: 'PATCH', // Usamos PATCH
        body: formData,
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Error desconocido');
      }
      
      editStatusText.textContent = '¡Guardado con éxito!';
      
      // Esperamos un segundo, cerramos el modal y recargamos la lista
      setTimeout(() => {
        closeEditModal();
        fetchAndRenderItems(); // Recargamos la tabla
      }, 1000);

    } catch (error) {
      editStatusText.textContent = `Error: ${error.message}`;
    } finally {
      editSubmitBtn.disabled = false;
    }
  }

  /**
   * Configura todos los listeners del modal y los botones "Editar"
   */
  function setupEditModalListeners() {
    const tableBody = document.getElementById('carousel-table-body');

    // 1. Listener en la tabla (Delegación de eventos)
    tableBody.addEventListener('click', (e) => {
      // Si el clic fue en un botón con clase 'edit-btn'
      if (e.target.classList.contains('edit-btn')) {
        // Recuperamos el string JSON del 'data-item'
        // Remplazamos ' por " para que sea JSON válido
        const itemJson = e.target.dataset.item.replace(/'/g, '"');
        const item = JSON.parse(itemJson);
        openEditModal(item);
      }
    });

    // 2. Listeners del modal
    cancelBtn.addEventListener('click', closeEditModal);
    editForm.addEventListener('submit', handleEditSubmit);
  }

  // --- INICIALIZACIÓN ---
  // (Quitamos el 'DOMContentLoaded' porque 'client:load' se encarga)
  
  fetchAndRenderItems();
  setupUploadForm();
  setupEditModalListeners();

</script>